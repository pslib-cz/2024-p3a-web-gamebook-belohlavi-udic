// <auto-generated />
using System;
using GameBook.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameBook.Server.Migrations
{
    [DbContext(typeof(GameBookContext))]
    [Migration("20250107200512_InitialCreat")]
    partial class InitialCreat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameBook.Server.Models.Challenge", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureOutcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("SuccessOutcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("GameBook.Server.Models.Connection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomID1")
                        .HasColumnType("int");

                    b.Property<int>("RoomID2")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomID1");

                    b.HasIndex("RoomID2");

                    b.ToTable("Connections");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ConnectionType = "Jít na východ",
                            RoomID1 = 1,
                            RoomID2 = 2
                        },
                        new
                        {
                            ID = 2,
                            ConnectionType = "Jít na sever",
                            RoomID1 = 2,
                            RoomID2 = 3
                        });
                });

            modelBuilder.Entity("GameBook.Server.Models.GameState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("GameBook.Server.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CurrentRoomID")
                        .HasColumnType("int");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameBook.Server.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Nacházíte se v opuštěném táboře uprostřed džungle. Všude kolem je hustá vegetace.",
                            Exits = "východ, západ",
                            Name = "Startovní tábor"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Úzká pěšina vede skrz hustou džungli. Slyšíte zvuky divokých zvířat.",
                            Exits = "sever, jih",
                            Name = "Lesní cesta"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Před vámi se tyčí starý provazový most. Vypadá nebezpečně.",
                            Exits = "východ, západ",
                            Name = "Starý most"
                        });
                });

            modelBuilder.Entity("GameBook.Server.Models.Challenge", b =>
                {
                    b.HasOne("GameBook.Server.Models.Room", null)
                        .WithMany("Challenges")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("GameBook.Server.Models.Connection", b =>
                {
                    b.HasOne("GameBook.Server.Models.Room", "Room1")
                        .WithMany()
                        .HasForeignKey("RoomID1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameBook.Server.Models.Room", "Room2")
                        .WithMany("Connections")
                        .HasForeignKey("RoomID2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room1");

                    b.Navigation("Room2");
                });

            modelBuilder.Entity("GameBook.Server.Models.GameState", b =>
                {
                    b.HasOne("GameBook.Server.Models.Player", "Player")
                        .WithMany("GameStates")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameBook.Server.Models.Player", b =>
                {
                    b.Navigation("GameStates");
                });

            modelBuilder.Entity("GameBook.Server.Models.Room", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Connections");
                });
#pragma warning restore 612, 618
        }
    }
}
